plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version '6.26.0' // Spotless 플러그인 추가
    id 'jacoco' // JaCoCo 플러그인 추가
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springAiVersion', "1.0.0-M6")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'mysql:mysql-connector-java:8.0.33'
    implementation 'jakarta.annotation:jakarta.annotation-api'
    implementation 'org.springframework.ai:spring-ai-chroma-store-spring-boot-starter'
    implementation 'org.springframework.ai:spring-ai-pdf-document-reader'
    implementation 'org.springframework.ai:spring-ai-tika-document-reader'
    implementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter'
    implementation 'org.springframework.ai:spring-ai-openai-embedding'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
    implementation 'io.github.resilience4j:resilience4j-ratelimiter'
    implementation 'io.github.resilience4j:resilience4j-spring-boot3'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    testImplementation 'org.flywaydb:flyway-core'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
    
    implementation 'org.springframework.ai:spring-ai-mcp-server-spring-boot-starter'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    
    // 로깅 의존성
    implementation 'org.slf4j:slf4j-api:2.0.9'
    
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.testcontainers:testcontainers:1.19.8'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.8'
    testImplementation 'org.testcontainers:mysql:1.19.8'
    testImplementation 'org.testcontainers:rabbitmq:1.19.8'
}

jacoco {
    toolVersion = "0.8.11" // JaCoCo 도구 버전
}

spotless {
    java {
        // Google Java Format 사용
        googleJavaFormat()
        // import 순서 정렬
        removeUnusedImports()
        // 파일 끝에 새 줄 추가
        trimTrailingWhitespace()
        endWithNewline()
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport' // 테스트 실행 후 JaCoCo 보고서 생성
}

jacocoTestReport {
    dependsOn tasks.test // 테스트가 먼저 실행되도록 의존성 설정
    reports {
        xml.required = true // XML 보고서 생성 (CI에서 사용)
        html.required = true // HTML 보고서 생성 (로컬에서 확인)
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'com/example/springmcp/SpringMcpApplication.class',
                    'com/example/springmcp/model/**', // 모델 클래스 제외
                    'com/example/springmcp/dto/**',   // DTO 클래스 제외
                    'com/example/springmcp/exception/**', // 예외 클래스 제외
                    'com/example/springmcp/config/**', // 설정 클래스 제외
                    'com/example/springmcp/util/**', // 유틸리티 클래스 제외
            ])
        }))
    }
}
