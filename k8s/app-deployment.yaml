apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-mcp-app
  labels:
    app: spring-mcp-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spring-mcp-app
  template:
    metadata:
      labels:
        app: spring-mcp-app
    spec:
      containers:
        - name: spring-mcp-app
          image: spring-mcp-app:latest # This image needs to be built and pushed to a registry
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://mysql:3306/spring_mcp_db
            - name: SPRING_DATASOURCE_USERNAME
              value: root
            - name: SPRING_DATASOURCE_PASSWORD
              value: password
            - name: SPRING_AI_VECTORSTORE_CHROMA_URL
              value: http://chromadb:8000
            - name: SPRING_AI_OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: openai-api-key
                  key: api-key
            - name: SPRING_RABBITMQ_HOST
              value: rabbitmq
            - name: SPRING_RABBITMQ_USERNAME
              value: guest
            - name: SPRING_RABBITMQ_PASSWORD
              value: guest
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: spring-mcp-app
  labels:
    app: spring-mcp-app
spec:
  type: LoadBalancer # Use NodePort or ClusterIP if LoadBalancer is not available
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: spring-mcp-app